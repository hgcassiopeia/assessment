// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/yume/Workspace/assessment/expenses/interface.go

// Package mock_expenses is a generated GoMock package.
package mock_expenses

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hgcassiopeia/assessment/expenses/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockRepository) CreateExpense(expense *entities.Expenses) (*entities.Expenses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", expense)
	ret0, _ := ret[0].(*entities.Expenses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockRepositoryMockRecorder) CreateExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockRepository)(nil).CreateExpense), expense)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockUseCase) CreateExpense(expense *entities.Expenses) (*entities.Expenses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", expense)
	ret0, _ := ret[0].(*entities.Expenses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockUseCaseMockRecorder) CreateExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockUseCase)(nil).CreateExpense), expense)
}
